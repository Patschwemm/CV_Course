Sheet 1:

    1. Really clever implementation of integral image. Forgot to take mean though in the results, both for sum and time
    4. 3 sigma is only half width, so kernel size is 2 * half width, hence you have higher difference with Gaussian Blur from opencv

Sheet 2:
    1. Kernel size of 7x7 corresponds to height = width = 7, not 49
    4. Image blending mask is grayscale, i.e. min=0, max=255, so instead of (1 - GR), it should be (255 - GR), the 1 in slides is assuming a binary mask.
       Ensure that data is of signed type before taking differences, in Laplacian Pyramid construction

Sheet 4:
    1. Result does not look good. Please refer to the model solution later to see a working implementation
       It is very difficult for me to go through your code to figure out where it goes wrong
       One advice, avoid such high dimensional matrices (you have e_total = np.zeros((V_size, k * k, 6, k, k)) which is 5 dimensional)
            - Such implementations are prone to errors. A 2 dimensional matrix is sufficient for this exercise's purpose
    2. Incomplete 0/10

Sheet 6:

    2. There is a bug in your code, check your variable names - especially for variance/covariance
    3. The split is wrong - standard deviation is supposed to be used to compute new means, not the variance
       (2 * np.power(self.var, 2)) -> Why square the variance??
       Does not work as expected -> Refer model solution